// Code generated by goa v3.19.1, DO NOT EDIT.
//
// book client
//
// Command:
// $ goa gen bookAPI/design

package book

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "book" service client.
type Client struct {
	CreateEndpoint goa.Endpoint
	ShowEndpoint   goa.Endpoint
	UpdateEndpoint goa.Endpoint
	DeleteEndpoint goa.Endpoint
}

// NewClient initializes a "book" service client given the endpoints.
func NewClient(create, show, update, delete_ goa.Endpoint) *Client {
	return &Client{
		CreateEndpoint: create,
		ShowEndpoint:   show,
		UpdateEndpoint: update,
		DeleteEndpoint: delete_,
	}
}

// Create calls the "create" endpoint of the "book" service.
// Create may return the following errors:
//   - "ValidationError" (type *goa.ServiceError)
//   - "NotFound" (type *goa.ServiceError): The book with the given ID was not found.
//   - "InternalError" (type *goa.ServiceError): An internal error occurred while processing the request.
//   - error: internal error
func (c *Client) Create(ctx context.Context, p *BookPayload) (res *Book, err error) {
	var ires any
	ires, err = c.CreateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Book), nil
}

// Show calls the "show" endpoint of the "book" service.
// Show may return the following errors:
//   - "NotFound" (type *goa.ServiceError)
//   - "InternalError" (type *goa.ServiceError)
//   - "ValidationError" (type *goa.ServiceError): The input provided for the book is invalid.
//   - error: internal error
func (c *Client) Show(ctx context.Context, p *ShowPayload) (res *Book, err error) {
	var ires any
	ires, err = c.ShowEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Book), nil
}

// Update calls the "update" endpoint of the "book" service.
// Update may return the following errors:
//   - "NotFound" (type *goa.ServiceError)
//   - "ValidationError" (type *goa.ServiceError)
//   - "InternalError" (type *goa.ServiceError)
//   - error: internal error
func (c *Client) Update(ctx context.Context, p *UpdatePayload) (res *Book, err error) {
	var ires any
	ires, err = c.UpdateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Book), nil
}

// Delete calls the "delete" endpoint of the "book" service.
// Delete may return the following errors:
//   - "NotFound" (type *goa.ServiceError)
//   - "InternalError" (type *goa.ServiceError)
//   - "ValidationError" (type *goa.ServiceError): The input provided for the book is invalid.
//   - error: internal error
func (c *Client) Delete(ctx context.Context, p *DeletePayload) (err error) {
	_, err = c.DeleteEndpoint(ctx, p)
	return
}
