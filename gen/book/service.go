// Code generated by goa v3.19.1, DO NOT EDIT.
//
// book service
//
// Command:
// $ goa gen bookAPI/design

package book

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service for managing books
type Service interface {
	// Create implements create.
	Create(context.Context, *BookPayload) (res *Book, err error)
	// Show implements show.
	Show(context.Context, *ShowPayload) (res *Book, err error)
	// Update implements update.
	Update(context.Context, *UpdatePayload) (res *Book, err error)
	// Delete implements delete.
	Delete(context.Context, *DeletePayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "books"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "book"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"create", "show", "update", "delete"}

// Book is the result type of the book service create method.
type Book struct {
	// ID of the book
	ID string
	// Title of the book
	Title string
	// Author of the book
	Author string
	// URL of the book cover
	CoverURL string
	// Publish date of the book
	PublishedAt string
}

// BookPayload is the payload type of the book service create method.
type BookPayload struct {
	// Title of the book
	Title string
	// Author of the book
	Author string
	// URL of the book cover
	CoverURL string
	// Publish date of the book
	PublishedAt string
}

// DeletePayload is the payload type of the book service delete method.
type DeletePayload struct {
	// ID of the book
	ID string
}

// ShowPayload is the payload type of the book service show method.
type ShowPayload struct {
	// ID of the book
	ID string
}

// UpdatePayload is the payload type of the book service update method.
type UpdatePayload struct {
	// ID of the book
	ID   string
	Book *BookPayload
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeValidationError builds a goa.ServiceError from an error.
func MakeValidationError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "ValidationError", false, false, false)
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "InternalError", false, false, false)
}
