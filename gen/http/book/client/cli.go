// Code generated by goa v3.19.1, DO NOT EDIT.
//
// book HTTP client CLI support package
//
// Command:
// $ goa gen bookAPI/design

package client

import (
	book "bookAPI/gen/book"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the book create endpoint from CLI
// flags.
func BuildCreatePayload(bookCreateBody string) (*book.BookPayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(bookCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"In optio dolor sed quo porro.\",\n      \"cover_url\": \"Natus magni laborum.\",\n      \"published_at\": \"2023-01-01\",\n      \"title\": \"Omnis molestiae sed.\"\n   }'")
		}
	}
	v := &book.BookPayload{
		Title:       body.Title,
		Author:      body.Author,
		CoverURL:    body.CoverURL,
		PublishedAt: body.PublishedAt,
	}

	return v, nil
}

// BuildShowPayload builds the payload for the book show endpoint from CLI
// flags.
func BuildShowPayload(bookShowID string) (*book.ShowPayload, error) {
	var id string
	{
		id = bookShowID
	}
	v := &book.ShowPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdatePayload builds the payload for the book update endpoint from CLI
// flags.
func BuildUpdatePayload(bookUpdateBody string, bookUpdateID string) (*book.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(bookUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"book\": {\n         \"author\": \"Eos consequuntur tempore.\",\n         \"cover_url\": \"Eum maiores maxime.\",\n         \"published_at\": \"2023-01-01\",\n         \"title\": \"At nesciunt deserunt.\"\n      }\n   }'")
		}
		if body.Book == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("book", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = bookUpdateID
	}
	v := &book.UpdatePayload{}
	if body.Book != nil {
		v.Book = marshalBookPayloadRequestBodyToBookBookPayload(body.Book)
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the book delete endpoint from CLI
// flags.
func BuildDeletePayload(bookDeleteID string) (*book.DeletePayload, error) {
	var id string
	{
		id = bookDeleteID
	}
	v := &book.DeletePayload{}
	v.ID = id

	return v, nil
}
