// Code generated by goa v3.19.1, DO NOT EDIT.
//
// book HTTP server types
//
// Command:
// $ goa gen bookAPI/design

package server

import (
	book "bookAPI/gen/book"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "book" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// URL of the book cover
	CoverURL *string `form:"cover_url,omitempty" json:"cover_url,omitempty" xml:"cover_url,omitempty"`
	// Publish date of the book
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// UpdateRequestBody is the type of the "book" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	Book *BookPayloadRequestBody `form:"book,omitempty" json:"book,omitempty" xml:"book,omitempty"`
}

// CreateResponseBody is the type of the "book" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID of the book
	ID string `form:"id" json:"id" xml:"id"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// URL of the book cover
	CoverURL string `form:"cover_url" json:"cover_url" xml:"cover_url"`
	// Publish date of the book
	PublishedAt string `form:"published_at" json:"published_at" xml:"published_at"`
}

// ShowResponseBody is the type of the "book" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID of the book
	ID string `form:"id" json:"id" xml:"id"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// URL of the book cover
	CoverURL string `form:"cover_url" json:"cover_url" xml:"cover_url"`
	// Publish date of the book
	PublishedAt string `form:"published_at" json:"published_at" xml:"published_at"`
}

// UpdateResponseBody is the type of the "book" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// ID of the book
	ID string `form:"id" json:"id" xml:"id"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// URL of the book cover
	CoverURL string `form:"cover_url" json:"cover_url" xml:"cover_url"`
	// Publish date of the book
	PublishedAt string `form:"published_at" json:"published_at" xml:"published_at"`
}

// CreateValidationErrorResponseBody is the type of the "book" service "create"
// endpoint HTTP response body for the "ValidationError" error.
type CreateValidationErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateInternalErrorResponseBody is the type of the "book" service "create"
// endpoint HTTP response body for the "InternalError" error.
type CreateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowNotFoundResponseBody is the type of the "book" service "show" endpoint
// HTTP response body for the "NotFound" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowInternalErrorResponseBody is the type of the "book" service "show"
// endpoint HTTP response body for the "InternalError" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "book" service "update"
// endpoint HTTP response body for the "NotFound" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateValidationErrorResponseBody is the type of the "book" service "update"
// endpoint HTTP response body for the "ValidationError" error.
type UpdateValidationErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInternalErrorResponseBody is the type of the "book" service "update"
// endpoint HTTP response body for the "InternalError" error.
type UpdateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "book" service "delete"
// endpoint HTTP response body for the "NotFound" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteInternalErrorResponseBody is the type of the "book" service "delete"
// endpoint HTTP response body for the "InternalError" error.
type DeleteInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BookPayloadRequestBody is used to define fields on request body types.
type BookPayloadRequestBody struct {
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// URL of the book cover
	CoverURL *string `form:"cover_url,omitempty" json:"cover_url,omitempty" xml:"cover_url,omitempty"`
	// Publish date of the book
	PublishedAt *string `form:"published_at,omitempty" json:"published_at,omitempty" xml:"published_at,omitempty"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "book" service.
func NewCreateResponseBody(res *book.Book) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		Author:      res.Author,
		CoverURL:    res.CoverURL,
		PublishedAt: res.PublishedAt,
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "book" service.
func NewShowResponseBody(res *book.Book) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		Author:      res.Author,
		CoverURL:    res.CoverURL,
		PublishedAt: res.PublishedAt,
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "book" service.
func NewUpdateResponseBody(res *book.Book) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		Author:      res.Author,
		CoverURL:    res.CoverURL,
		PublishedAt: res.PublishedAt,
	}
	return body
}

// NewCreateValidationErrorResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "book" service.
func NewCreateValidationErrorResponseBody(res *goa.ServiceError) *CreateValidationErrorResponseBody {
	body := &CreateValidationErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateInternalErrorResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "book" service.
func NewCreateInternalErrorResponseBody(res *goa.ServiceError) *CreateInternalErrorResponseBody {
	body := &CreateInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "book" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowInternalErrorResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "book" service.
func NewShowInternalErrorResponseBody(res *goa.ServiceError) *ShowInternalErrorResponseBody {
	body := &ShowInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "book" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateValidationErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "book" service.
func NewUpdateValidationErrorResponseBody(res *goa.ServiceError) *UpdateValidationErrorResponseBody {
	body := &UpdateValidationErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInternalErrorResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "book" service.
func NewUpdateInternalErrorResponseBody(res *goa.ServiceError) *UpdateInternalErrorResponseBody {
	body := &UpdateInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "book" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteInternalErrorResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "book" service.
func NewDeleteInternalErrorResponseBody(res *goa.ServiceError) *DeleteInternalErrorResponseBody {
	body := &DeleteInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookPayload builds a book service create endpoint payload.
func NewCreateBookPayload(body *CreateRequestBody) *book.BookPayload {
	v := &book.BookPayload{
		Title:       *body.Title,
		Author:      *body.Author,
		CoverURL:    *body.CoverURL,
		PublishedAt: *body.PublishedAt,
	}

	return v
}

// NewShowPayload builds a book service show endpoint payload.
func NewShowPayload(id string) *book.ShowPayload {
	v := &book.ShowPayload{}
	v.ID = id

	return v
}

// NewUpdatePayload builds a book service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id string) *book.UpdatePayload {
	v := &book.UpdatePayload{}
	v.Book = unmarshalBookPayloadRequestBodyToBookBookPayload(body.Book)
	v.ID = id

	return v
}

// NewDeletePayload builds a book service delete endpoint payload.
func NewDeletePayload(id string) *book.DeletePayload {
	v := &book.DeletePayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.CoverURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cover_url", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published_at", "body"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Book == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("book", "body"))
	}
	if body.Book != nil {
		if err2 := ValidateBookPayloadRequestBody(body.Book); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBookPayloadRequestBody runs the validations defined on
// BookPayloadRequestBody
func ValidateBookPayloadRequestBody(body *BookPayloadRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.CoverURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cover_url", "body"))
	}
	if body.PublishedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("published_at", "body"))
	}
	return
}
